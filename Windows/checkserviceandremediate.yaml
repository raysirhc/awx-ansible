---
- name: Check status and EXE version of specific Windows services (Read-Only) and install agent if needed
  hosts: windows
  gather_facts: yes
  vars:
    monitored_services:
      - name: "Spooler"
        display_name: "Print Spooler"
        exe_path: "C:\\Windows\\System32\\spoolsv.exe"
        target_version: null
        install_cmd: null
      - name: "Themes"
        display_name: "Themes"
        exe_path: "C:\\Windows\\System32\\svchost.exe"
        target_version: null
        install_cmd: null
      - name: "BITS"
        display_name: "Background Intelligent Transfer Service"
        exe_path: "C:\\Windows\\System32\\svchost.exe"
        target_version: null
        install_cmd: null
      - name: "W32Time"
        display_name: "Windows Time"
        exe_path: "C:\\Windows\\System32\\svchost.exe"
        target_version: null
        install_cmd: null
      - name: "SplunkForwarder"
        display_name: "Splunk Universal Forwarder"
        exe_path: "C:\\Program Files\\SplunkUniversalForwarder\\bin\\splunkd.exe"
        target_version: "9.0.5"
        install_cmd: "msiexec.exe /i \\\\network\\path\\to\\splunkforwarder-9.0.5.msi /quiet"
      - name: "MorphisecAgent"
        display_name: "Morphisec Agent"
        exe_path: "C:\\Program Files\\Morphisec\\bin\\MorphisecAgent.exe"
        target_version: "3.2.1"
        install_cmd: "msiexec.exe /i \\\\network\\path\\to\\morphisecagent-3.2.1.msi /quiet"
    csv_output_path: "/home/csv/check_service_status_exeversion_{{ ansible_date_time.date }}.csv"
    service_results: []
  tasks:
    - name: Get all services information
      ansible.windows.win_service_info:
      register: all_services

    - name: Initialize service results list
      set_fact:
        service_results: []

    - name: Get EXE product version via PowerShell for each service
      ansible.windows.win_shell: |
        $cleanPath = "{{ item.exe_path }}"
        if (Test-Path $cleanPath) {
          (Get-Item $cleanPath).VersionInfo.ProductVersion
        } else {
          "Path Not Found"
        }
      register: exe_version_results
      loop: "{{ monitored_services }}"
      failed_when: false

    - name: Build service results
      set_fact:
        service_results: "{{ service_results + [current_service_status] }}"
      vars:
        service_exists: "{{ all_services.services | selectattr('name', '==', item.0.name) | list | length > 0 }}"
        found_service: "{{ all_services.services | selectattr('name', '==', item.0.name) | first | default({}) }}"
        current_service_status: "{{
          {
            'name': item.0.name,
            'display_name': item.0.display_name,
            'status': (found_service.state if service_exists else 'Missing'),
            'start_mode': (found_service.start_mode if service_exists else 'NA'),
            'version': item.1.stdout | default('Unknown'),
            'target_version': item.0.target_version | default('null'),
            'install_cmd': item.0.install_cmd | default('null'),
            'timestamp': ansible_date_time.iso8601,
            'unique_key': ansible_hostname + '|' + item.0.name
          }
        }}"
      loop: "{{ monitored_services | zip(exe_version_results.results) | list }}"

    - name: Install agent if missing or version mismatch
      ansible.windows.win_shell: "{{ item.install_cmd }}"
      when: 
        - item.install_cmd is defined and item.install_cmd != 'null'
        - item.status == 'Missing' or (item.target_version is defined and item.target_version != 'null' and item.version != item.target_version)
      loop: "{{ service_results }}"
      register: install_result
      failed_when: install_result.rc != 0

    - name: Remove existing CSV file and create new one with header
      delegate_to: localhost
      run_once: true
      copy:
        content: "Hostname,ServiceName,DisplayName,Status,StartMode,Version,TargetVersion,InstallCmd,Timestamp,UniqueKey\n"
        dest: "{{ csv_output_path }}"
      become: false

    - name: Write service status to CSV on control machine
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_output_path }}"
        line: "{{ ansible_hostname }},{{ item.name }},{{ item.display_name }},{{ item.status }},{{ item.start_mode }},{{ item.version }},{{ item.target_version }},{{ item.install_cmd }},{{ item.timestamp }},{{ item.unique_key }}"
        state: present
      loop: "{{ service_results }}"
      become: false
