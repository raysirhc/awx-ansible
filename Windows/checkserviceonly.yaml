---
- name: Check status of specific Windows services (Read-Only)
  hosts: windows_servers
  gather_facts: yes
  vars:
    # Define the services you want to monitor
    monitored_services:
      - name: "Spooler"
        display_name: "Print Spooler"
      - name: "Themes"
        display_name: "Themes"
      - name: "BITS"
        display_name: "Background Intelligent Transfer Service"
      - name: "W32Time"
        display_name: "Windows Time"
      - name: "SplunkUniversalForwarder"
        display_name: "Splunk Universal Forwarder"
      # Add more services as needed
    
    # CSV file path (will be created on the Ansible control machine)
    csv_output_path: "/home/csv/check_service_status_only_{{ ansible_date_time.date }}.csv"
    
    # Results collection list
    service_results: []

  tasks:
    - name: Get all services information
      ansible.windows.win_service_info:
      register: all_services

    - name: Initialize service results list
      set_fact:
        service_results: []

    - name: Check status of each monitored service
      set_fact:
        service_results: "{{ service_results + [current_service_status] }}"
      vars:
        service_exists: "{{ all_services.services | selectattr('name', '==', item.name) | list | length > 0 }}"
        found_service: "{{ all_services.services | selectattr('name', '==', item.name) | first }}"
        current_service_status: "{{
          {
            'name': item.name,
            'display_name': item.display_name,
            'status': (found_service.state if service_exists else 'Not Found'),
            'start_mode': (found_service.start_mode if service_exists else 'N/A'),
          }
        }}"
      loop: "{{ monitored_services }}"
      when: service_exists or not service_exists  # Always execute

    - name: Display current service status
      debug:
        msg: "{{ item.display_name }} ({{ item.name }}): {{ item.status }} - Start Mode: {{ item.start_mode }}"
      loop: "{{ service_results }}"

    - name: Create CSV header on control machine
      delegate_to: localhost
      run_once: true
      lineinfile:
        path: "{{ csv_output_path }}"
        line: "Hostname,ServiceName,DisplayName,Status,StartMode,Timestamp"
        create: yes
        state: present
      become: false

    - name: Write service status to CSV on control machine
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_output_path }}"
        line: "{{ inventory_hostname }},{{ item.name }},{{ item.display_name }},{{ item.status }},{{ item.start_mode }},{{ ansible_date_time.iso8601 }}"
        state: present
      loop: "{{ service_results }}"
      become: false

    - name: Display summary
      debug:
        msg: 
          - "Service status check completed for {{ inventory_hostname }}"
          - "Results written to {{ csv_output_path }} on control machine"
          - "Services checked: {{ service_results | length }}"
          - "Running services: {{ service_results | selectattr('status', '==', 'running') | list | length }}"
          - "Stopped services: {{ service_results | selectattr('status', '==', 'stopped') | list | length }}"
          - "Missing services: {{ service_results | selectattr('status', '==', 'Not Found') | list | length }}"

    - name: Show services that are stopped or missing
      debug:
        msg: "⚠️  {{ item.display_name }} ({{ item.name }}): {{ item.status }}"
      loop: "{{ service_results }}"
      when: item.status != 'running'
