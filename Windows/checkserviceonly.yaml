---
- name: Check status and EXE version of specific Windows services (Read-Only)
  hosts: windows_servers
  gather_facts: yes
  vars:
    monitored_services:
      - name: "Spooler"
        display_name: "Print Spooler"
      - name: "Themes"
        display_name: "Themes"
      - name: "BITS"
        display_name: "Background Intelligent Transfer Service"
      - name: "W32Time"
        display_name: "Windows Time"
      - name: "SplunkUniversalForwarder"
        display_name: "Splunk Universal Forwarder"
      - name: "Agent"
        display_name: "Security Agent"

    csv_output_path: "/home/csv/check_service_status_exeversion_{{ ansible_date_time.date }}.csv"
    service_results: []

  tasks:
    - name: Get all services information
      ansible.windows.win_service_info:
      register: all_services

    - name: Initialize service results list
      set_fact:
        service_results: []

    - name: Check status and EXE version of each monitored service
      block:
        - name: Build service facts with EXE version
          vars:
            service_exists: "{{ all_services.services | selectattr('name', '==', item.name) | list | length > 0 }}"
            found_service: "{{ all_services.services | selectattr('name', '==', item.name) | first }}"
            exe_path: "{{ (found_service.binary_path | regex_replace('\"','')) if service_exists else '' }}"
          block:
            - name: Get EXE version via PowerShell
              ansible.windows.win_shell: |
                if (Test-Path "{{ exe_path }}") {
                  (Get-Item "{{ exe_path }}").VersionInfo.FileVersion
                } else {
                  "Unknown"
                }
              register: exe_version_result
              when: exe_path != ""

            - name: Append service result
              set_fact:
                service_results: "{{ service_results + [current_service_status] }}"
              vars:
                current_service_status: "{{
                  {
                    'name': item.name,
                    'display_name': item.display_name,
                    'status': (found_service.state if service_exists else 'Missing'),
                    'start_mode': (found_service.start_mode if service_exists else 'NA'),
                    'version': exe_version_result.stdout | default('Unknown'),
                    'timestamp': ansible_date_time.iso8601,
                    'unique_key': ansible_hostname + '|' + item.name
                  }
                }}"
      loop: "{{ monitored_services }}"

    - name: Remove existing CSV file and create new one with header
      delegate_to: localhost
      run_once: true
      copy:
        content: "Hostname,ServiceName,DisplayName,Status,StartMode,Version,Timestamp,UniqueKey\n"
        dest: "{{ csv_output_path }}"
      become: false

    - name: Write service status to CSV on control machine
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_output_path }}"
        line: "{{ ansible_hostname }},{{ item.name }},{{ item.display_name }},{{ item.status }},{{ item.start_mode }},{{ item.version }},{{ item.timestamp }},{{ item.unique_key }}"
        state: present
      loop: "{{ service_results }}"
      become: false
