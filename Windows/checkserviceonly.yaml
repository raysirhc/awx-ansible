---
- name: Check status and EXE version of specific Windows services (Read-Only)
  hosts: windows_servers
  gather_facts: yes
  vars:
    monitored_services:
      - name: "Spooler"
        display_name: "Print Spooler"
      - name: "Themes"
        display_name: "Themes"
      - name: "BITS"
        display_name: "Background Intelligent Transfer Service"
      - name: "W32Time"
        display_name: "Windows Time"
      - name: "SplunkForwarder"
        display_name: "Splunk Universal Forwarder"
      - name: "MorphisecAgent"
        display_name: "Morphisec Agent"
    csv_output_path: "/home/csv/check_service_status_exeversion_{{ ansible_date_time.date }}.csv"
    service_results: []
  tasks:
    - name: Get all services information
      ansible.windows.win_service_info:
      register: all_services

    - name: Initialize service results list
      set_fact:
        service_results: []

    - name: Get EXE product version via PowerShell for each service
      ansible.windows.win_shell: |
        $serviceName = "{{ item.name }}"
        $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
        if ($service) {
          $binaryPath = (Get-WmiObject -Class Win32_Service -Filter "Name='$serviceName'").PathName
          if ($binaryPath) {
            $cleanPath = $binaryPath -replace '"', '' -replace ' .*', ''
            if (Test-Path $cleanPath) {
              (Get-Item $cleanPath).VersionInfo.ProductVersion
            } else {
              "UnknownA"
            }
          } else {
            "UnknownB"
          }
        } else {
          "UnknownC"
        }
      register: exe_version_results
      loop: "{{ monitored_services }}"
      failed_when: false

    - name: Build service results
      set_fact:
        service_results: "{{ service_results + [current_service_status] }}"
      vars:
        service_exists: "{{ all_services.services | selectattr('name', '==', item.0.name) | list | length > 0 }}"
        found_service: "{{ all_services.services | selectattr('name', '==', item.0.name) | first }}"
        current_service_status: "{{
          {
            'name': item.0.name,
            'display_name': item.0.display_name,
            'status': (found_service.state if service_exists else 'Missing'),
            'start_mode': (found_service.start_mode if service_exists else 'NA'),
            'version': item.1.stdout | default('Unknown'),
            'timestamp': ansible_date_time.iso8601,
            'unique_key': ansible_hostname + '|' + item.0.name
          }
        }}"
      loop: "{{ monitored_services | zip(exe_version_results.results) | list }}"

    - name: Remove existing CSV file and create new one with header
      delegate_to: localhost
      run_once: true
      copy:
        content: "Hostname,ServiceName,DisplayName,Status,StartMode,Version,Timestamp,UniqueKey\n"
        dest: "{{ csv_output_path }}"
      become: false

    - name: Write service status to CSV on control machine
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_output_path }}"
        line: "{{ ansible_hostname }},{{ item.name }},{{ item.display_name }},{{ item.status }},{{ item.start_mode }},{{ item.version }},{{ item.timestamp }},{{ item.unique_key }}"
        state: present
      loop: "{{ service_results }}"
      become: false
